1. generateProto 가 오류가 발생함.
   1) intellij 에는 오류메세지가 안보여셔, 터미널에서 gradle generateProto 를 치니 proto화일명을 못찾는다고 나와서,
   2) build.gradle로 sourceSets을 보니 src/main/shared/protofile 설정되어 있다.
   3) 원래 기본은 src/main/proto인데 협업을 위해 shared로 옮겨두었다.
   4) 따라서 기본 dir 이외 추가로 src/main/shared/protofile을 등록했지만, 못찾아서
   5) src/main/shared/protofile/pg, src/main/shared/protofile/hsm 등 하부 dir까지 명시하니 성공적으로 된다.
   6) 여기서, 그럼 상위디렉토리까지만 하면 하위디렉토리는 검색을 못한다는 결론인데 이상하다 -> 이부분 googling해봐야하나?

2. build.grade에 compile과 compileOnly도 차이가 있는것 같은데 차이를 정확히 모르겠다.
   1) lombok을 compileOnly로 해두고 하니 안된다. compile로 하니 된다. 차이가 뭘까?

3. git init 하여 .git 을 내 local에 만들었다.
   git add READM.md 랑 git add ducu.txt 해서 이제 이 화일2개는 git으로 버전관리할꺼라고 list등록하였다.( 반대는 gitignore화일에 등록 )
   git commit -m "startup" 이걸 수행해서 local에서 변경하던 화일에 요까지 변경한거 정리한다고 하여 commit을 하였다.( db에 savepoint랑 비슷 ) 메세지도 함께 남긴다.
   내 local이 날아가면 안되므로 동일한 걸 remote에 repository를 생성하고 거기에 올려둔다. 아래 git remote 명령어는 remote repository 를 추가하는 명령어다.
   git remote add orgin https://github.com/freesiads/myDoc.git
   git push -u orgin master 를 수행하여 나의 orgin이 remote의 master에 push하였다.


4. 계속 헷갈리는 한가지가 있다. Map 객체이다.
   1) Map은 추상클래스다 따라서 생성할수 없다.(new로)
   2) Map은 그래서 HashMap 클래스 등으로 생성하여 Casting하여 사용한다.

5. git에 대해 좀더 알아보자
   1) checkout 이란. 호텔에서 나가는것을 의미한다. 따라서 Branch개념을 도입하여, git checkout 은 현재 Branch에서 나간다 라는것이다.
   2) 그냥 나가면 어디로 가는지 알아야 한다. 따라서 git checkout 만 치면 Your branch is up-to-date with 'orgin/master' 나온다.
   3) 우선 이걸 이해하기 위해 branch를 좀더 보자.
   4) 현재 만들어 져 있는 local branch 보는 방법 : git branch -l ( local 의 앞글자 )
   5) 현재 만들어 져 있는 remote branch list 보는 방법 : gir branch -r ( remote 의 앞글자 )
   6) 현재 만들어 져 있는 local, remote 전체 branch list 보는 방법 : git branch -a ( all 의 앞글자 )
   7) orgin 개념은 여러 이견들이 있는것 같다. 하지만 아래 정의가 가장 와 닿는다.
      가. origin is the alias for the URL from which you cloned the repository. Note that you can change this alias.
      나. There is one master branch in the remote repository (aliased by origin). There is also another master branch created locally.
   8) 따라서, git branch -a를 해보니, local엔 master만 존재, remote엔 orgin/master만 존재한다.
      orgin의 의미는 remote url이라고 하니 remote에도 master만 있다는 것이다.
   9) 그래서 git branch 만 치면 위에 처럼 나온다.
   10) 먼저 git branch feature_20170223 으로 feature_20170223 이름의 branch를 만들자.
   11) git branch -l 로 보니 잘 보인다.
   12) 현재 branch를 master에서 feature_20170223로 옮기자. ( git checkout feature_20170223 )
   13) git commit -m "git study add" 로 하니 On branch feature_20170223, nothing to commit, working directory clean이 나옴.
   14) 즉 새로 만든 branch엔 아무내용이 없다. 따라서 master에 있는 것을 가져와 보자..
   15) git merge feature_20170223 했는데 Already up-to-date로 나온다. 무슨 일일까.
   16) 다시 git checkout master로 돌아와서 master에서 commit을 해보았다.
   

